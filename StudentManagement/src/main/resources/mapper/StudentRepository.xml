<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="raisetech.StudentManagement.repository.StudentRepository">

  <resultMap id="StudentCourseMap" type="raisetech.StudentManagement.data.StudentCourse">
    <result property="id" column="id"/>
    <result property="studentId" column="student_id"/>
    <result property="courseName" column="course_name"/>
    <result property="courseStartAt" column="course_start_at"/>
    <result property="courseEndAt" column="course_end_at"/>
    <result property="statusId" column="status_id"/>
    <result property="statusName" column="status_name"/>
  </resultMap>

  <!-- 受講生全件検索 -->
  <select id="search" resultType="raisetech.StudentManagement.data.Student">
    SELECT * FROM students
  </select>

  <!-- ✅★ 受講生ID検索を追加 -->
  <select id="searchStudent" parameterType="String"
    resultType="raisetech.StudentManagement.data.Student">
    SELECT * FROM students WHERE id = #{id}
  </select>

  <!-- 受講生コース情報の全件検索 -->
  <select id="searchStudentCourseList" resultMap="StudentCourseMap">
    SELECT sc.id,
    sc.student_id,
    sc.course_name,
    sc.course_start_at,
    sc.course_end_at,
    sc.status_id,
    s.name AS status_name
    FROM students_courses sc
    LEFT JOIN statuses s ON sc.status_id = s.id
  </select>

  <!-- 受講生IDに紐づくコース情報検索 -->
  <select id="searchStudentCourse" parameterType="String" resultMap="StudentCourseMap">
    SELECT sc.id,
    sc.student_id,
    sc.course_name,
    sc.course_start_at,
    sc.course_end_at,
    sc.status_id,
    s.name AS status_name
    FROM students_courses sc
    LEFT JOIN statuses s ON sc.status_id = s.id
    WHERE sc.student_id = #{studentId}
  </select>

  <!-- 受講生の新規登録（IDは自動採番） -->
  <insert id="registerStudent" useGeneratedKeys="true" keyProperty="id"
    parameterType="raisetech.StudentManagement.data.Student">
    INSERT INTO students(name, kana_name, nickname, email, area, age, sex, remark, is_deleted)
    VALUES(#{name}, #{kanaName}, #{nickname}, #{email}, #{area}, #{age}, #{sex}, #{remark}, false)
  </insert>

  <!-- 受講生コース情報の新規登録（IDは自動採番・statusは自動的に「1(=仮申込)」として登録） -->
  <insert id="registerStudentCourse" useGeneratedKeys="true" keyProperty="id"
    parameterType="raisetech.StudentManagement.data.StudentCourse">
    INSERT INTO students_courses(student_id, course_name, course_start_at, course_end_at, status_id)
    VALUES(#{studentId}, #{courseName}, #{courseStartAt}, #{courseEndAt}, #{statusId})
  </insert>

  <!-- 受講生の更新 -->
  <update id="updateStudent" parameterType="raisetech.StudentManagement.data.Student">
    UPDATE students
    SET name = #{name},
    kana_name = #{kanaName},
    nickname = #{nickname},
    email = #{email},
    area = #{area},
    age = #{age},
    sex = #{sex},
    remark = #{remark},
    is_deleted = #{isDeleted}
    WHERE id = #{id}
  </update>

  <!-- 受講生コース情報のコース名更新（IDで指定） -->
  <update id="updateStudentCourse" parameterType="raisetech.StudentManagement.data.StudentCourse">
    UPDATE students_courses
    <set>
      <if test="courseName != null">course_name = #{courseName},</if>
      <if test="courseStartAt != null">course_start_at = #{courseStartAt},</if>
      <if test="courseEndAt != null">course_end_at = #{courseEndAt},</if>
      <if test="statusId != null">status_id = #{statusId},</if>
    </set>
    WHERE id = #{id}
  </update>

  <!-- 条件検索：動的SQL -->
  <select id="searchByConditions"
    parameterType="raisetech.StudentManagement.domain.StudentSearchCondition"
    resultType="raisetech.StudentManagement.data.Student">
    SELECT * FROM students
    <where>
      <if test="name != null and name != ''">
        AND name LIKE CONCAT('%', #{name}, '%')
      </if>
      <if test="area != null and area != ''">
        AND area = #{area}
      </if>
      <if test="sex != null and sex != ''">
        AND sex = #{sex}
      </if>
      <if test="deleted != null">
        AND is_deleted = #{deleted}
      </if>
    </where>
  </select>
  
</mapper>